vi prog.x

struct mul_in{
long arg1;
long arg2;
};

struct mul_out{
long res;
};

program MUL_PROG{
         version MUL_VERS{
                   mul_out MULPROC (mul_in)=1;
                         }=1;
                }=0x31230000;

vi client.c

#include <rpc/rpc.h>
#include "prog.h"
#include<stdio.h>
#include<stdlib.h>

void main(int argc,char *argv[])
{
 CLIENT *cl;
 mul_in in;
 mul_out *outp; 

if(argc!=4)
printf("error message");

 cl=clnt_create(argv[1],MUL_PROG,MUL_VERS,"TCP");

in.arg1=atol(argv[2]);
in.arg2=atol(argv[3]);
 outp=mulproc_1(&in,cl);

printf("result:%ld\n",outp->res);

exit(0);

}

vi server.c

#include "prog.h"
#include<stdio.h>
#include<stdlib.h>


avg_out *mulproc_1_svc(mul_in *argp,struct svc_req *rqstp)
 {
  static mul_out result;
  result.res=argp->arg1*argp->arg2;
 return(&result);
}


-----------OUTPUT--------------
[Student@PL-10 ~]$ rpcgen -c prog.x
[Student@PL-10 ~]$ cc -c client.c -o client.o
[Student@PL-10 ~]$ cc -c prog_clnt.c -o prog_clnt.o
[Student@PL-10 ~]$ cc -c prog_xdr.c -o prog_xdr.o
[Student@PL-10 ~]$ cc -o client client.o prog_clnt.o prog_xdr.o
[Student@PL-10 ~]$ cc -c server.c -o server.o
[Student@PL-10 ~]$ cc -c prog_svc.c -o prog_svc.o
[Student@PL-10 ~]$ cc -o server server.o prog_svc.o prog_xdr.o
[Student@PL-10 ~]$ su
Password: 
[root@PL-10 Student]#  ./server
[Student@PL-10 ~]$ ./client 127.0.0.1 4 8
result:32


